{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2
    ],
    "data": [
        "    # for each expression",
        "+ ",
        "    for (i in seq_along(args)) {",
        "+ ",
        "      ",
        "+ ",
        "      expr <- args[[i]]",
        "+ ",
        "      ",
        "+ ",
        "      # do something, note all the newlines...Slack ``` needs them",
        "+ ",
        "      tmp <- switch(mode(expr),",
        "+ ",
        "                    # if it's actually an expresison, iterate over it",
        "+ ",
        "                    expression = {",
        "+ ",
        "                      lapply(expr, evalVis)",
        "+ ",
        "                    },",
        "+ ",
        "                    # if it's a call or a name, eval, printing run output as if in console",
        "+ ",
        "                    call = ,",
        "+ ",
        "                    name = {",
        "+ ",
        "                      list(evalVis(expr))",
        "+ ",
        "                    },",
        "+ ",
        "                    # if pretty much anything else (i.e. a bare value) just output it",
        "+ ",
        "                    integer = ,",
        "+ ",
        "                    double = ,",
        "+ ",
        "                    complex = ,",
        "+ ",
        "                    raw = ,",
        "+ ",
        "                    logical = ,",
        "+ ",
        "                    numeric = cat(sprintf(\"%s\\n\\n\", as.character(expr))),",
        "+ ",
        "                    character = cat(sprintf(\"%s\\n\\n\", expr)),",
        "+ ",
        "                    stop(\"mode of argument not handled at present by slackr\"))",
        "+ ",
        "      ",
        "+ ",
        "      for (item in tmp) if (item$visible) { cat(item$value); cat(\"\\n\") }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    on.exit()",
        "+ ",
        "    ",
        "+ ",
        "    sink()",
        "+ ",
        "    close(fil)",
        "+ ",
        "    ",
        "+ ",
        "    # combined all of them (rval is a character vector)",
        "+ ",
        "    output <- paste0(rval, collapse=\"\\n\")",
        "+ ",
        "    ",
        "+ ",
        "    loc <- Sys.getlocale('LC_CTYPE')",
        "+ ",
        "    Sys.setlocale('LC_CTYPE','C')",
        "+ ",
        "    on.exit(Sys.setlocale(\"LC_CTYPE\", loc))",
        "+ ",
        "    ",
        "+ ",
        "    resp <- POST(url = incoming_webhook_url, encode = \"form\",",
        "+ ",
        "                 add_headers(`Content-Type` = \"application/x-www-form-urlencoded\",",
        "+ ",
        "                             Accept = \"*/*\"), body = URLencode(sprintf(\"payload={\\\"channel\\\": \\\"%s\\\", \\\"username\\\": \\\"%s\\\", \\\"text\\\": \\\"%s\\\"%s}\",",
        "+ ",
        "                                                                       channel, username, output, icon_emoji)))",
        "+ ",
        "    warn_for_status(resp)",
        "+ ",
        "  }",
        "+ ",
        "  return(invisible())",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data = fromJSON(file=\"https://site.api.espn.com/apis/site/v2/sports/basketball/womens-college-basketball/scoreboard?groups=50\")",
        "> ",
        "#data = fromJSON(file=\"scoreboard.json\")",
        "> ",
        "games = data[[\"events\"]]",
        "> ",
        "",
        "> ",
        "games_previous = read.csv('all_games.csv')",
        "> ",
        "games_table = as.data.frame(do.call(rbind, games))",
        "> ",
        "",
        "> ",
        "games_table$competitions[[1]][[\"broadcasts\"]]",
        "NULL\n",
        "> ",
        "",
        "> ",
        "has_odds = NULL",
        "> ",
        "",
        "> ",
        "for (a in 1:length(games))",
        "+ ",
        "{",
        "+ ",
        "  has_odds = as.vector(c(has_odds,0 < length(games_table$competitions[[a]][[1]][[\"odds\"]])))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "games_table$has_odds = has_odds",
        "> ",
        "",
        "> ",
        "games_clean = games_table[,c(\"id\",\"shortName\",\"has_odds\",\"date\")]",
        "> ",
        "",
        "> ",
        "games_clean$date = as.character(with_tz((strptime(games_clean$date, \"%Y-%m-%dT%H:%MZ\",tz = \"UTC\")),\"America/Chicago\"))",
        "> ",
        "",
        "> ",
        "games_clean <- as.data.frame(apply(games_clean,2,as.character))",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[order(games_clean$date),]",
        "> ",
        "rownames(games_clean) = NULL",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[which(games_clean$has_odds == 'TRUE'),]",
        "> ",
        "",
        "> ",
        "games_output = rbind(games_previous,games_clean)",
        "> ",
        "library(rjson)",
        "> ",
        "library(slackr)",
        "> ",
        "library(httr)",
        "> ",
        "library(lubridate)",
        "> ",
        "slackr_bot1 <- function(...,",
        "+ ",
        "                        channel=Sys.getenv(\"SLACK_CHANNEL\"),",
        "+ ",
        "                        username=Sys.getenv(\"SLACK_USERNAME\"),",
        "+ ",
        "                        icon_emoji=Sys.getenv(\"SLACK_ICON_EMOJI\"),",
        "+ ",
        "                        incoming_webhook_url=Sys.getenv(\"SLACK_INCOMING_URL_PREFIX\")) {",
        "+ ",
        "  ",
        "+ ",
        "  if (incoming_webhook_url == \"\") {",
        "+ ",
        "    stop(\"No incoming webhook URL specified. Did you forget to call slackr_setup()?\", call. = FALSE)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (icon_emoji != \"\") { icon_emoji <- sprintf(', \"icon_emoji\": \"%s\"', icon_emoji)  }",
        "+ ",
        "  ",
        "+ ",
        "  resp_ret <- \"\"",
        "+ ",
        "  ",
        "+ ",
        "  if (!missing(...)) {",
        "+ ",
        "    ",
        "+ ",
        "    # mimics capture.output",
        "+ ",
        "    ",
        "+ ",
        "    # get the arglist",
        "+ ",
        "    args <- substitute(list(...))[-1L]",
        "+ ",
        "    ",
        "+ ",
        "    # setup in-memory sink",
        "+ ",
        "    rval <- NULL",
        "+ ",
        "    fil <- textConnection(\"rval\", \"w\", local = TRUE)",
        "+ ",
        "    ",
        "+ ",
        "    sink(fil)",
        "+ ",
        "    on.exit({",
        "+ ",
        "      sink()",
        "+ ",
        "      close(fil)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # where we'll need to eval expressions",
        "+ ",
        "    pf <- parent.frame()",
        "+ ",
        "    ",
        "+ ",
        "    # how we'll eval expressions",
        "+ ",
        "    evalVis <- function(expr) withVisible(eval(expr, pf))",
        "+ ",
        "    ",
        "+ ",
        "    # for each expression",
        "+ ",
        "    for (i in seq_along(args)) {",
        "+ ",
        "      ",
        "+ ",
        "      expr <- args[[i]]",
        "+ ",
        "      ",
        "+ ",
        "      # do something, note all the newlines...Slack ``` needs them",
        "+ ",
        "      tmp <- switch(mode(expr),",
        "+ ",
        "                    # if it's actually an expresison, iterate over it",
        "+ ",
        "                    expression = {",
        "+ ",
        "                      lapply(expr, evalVis)",
        "+ ",
        "                    },",
        "+ ",
        "                    # if it's a call or a name, eval, printing run output as if in console",
        "+ ",
        "                    call = ,",
        "+ ",
        "                    name = {",
        "+ ",
        "                      list(evalVis(expr))",
        "+ ",
        "                    },",
        "+ ",
        "                    # if pretty much anything else (i.e. a bare value) just output it",
        "+ ",
        "                    integer = ,",
        "+ ",
        "                    double = ,",
        "+ ",
        "                    complex = ,",
        "+ ",
        "                    raw = ,",
        "+ ",
        "                    logical = ,",
        "+ ",
        "                    numeric = cat(sprintf(\"%s\\n\\n\", as.character(expr))),",
        "+ ",
        "                    character = cat(sprintf(\"%s\\n\\n\", expr)),",
        "+ ",
        "                    stop(\"mode of argument not handled at present by slackr\"))",
        "+ ",
        "      ",
        "+ ",
        "      for (item in tmp) if (item$visible) { cat(item$value); cat(\"\\n\") }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    on.exit()",
        "+ ",
        "    ",
        "+ ",
        "    sink()",
        "+ ",
        "    close(fil)",
        "+ ",
        "    ",
        "+ ",
        "    # combined all of them (rval is a character vector)",
        "+ ",
        "    output <- paste0(rval, collapse=\"\\n\")",
        "+ ",
        "    ",
        "+ ",
        "    loc <- Sys.getlocale('LC_CTYPE')",
        "+ ",
        "    Sys.setlocale('LC_CTYPE','C')",
        "+ ",
        "    on.exit(Sys.setlocale(\"LC_CTYPE\", loc))",
        "+ ",
        "    ",
        "+ ",
        "    resp <- POST(url = incoming_webhook_url, encode = \"form\",",
        "+ ",
        "                 add_headers(`Content-Type` = \"application/x-www-form-urlencoded\",",
        "+ ",
        "                             Accept = \"*/*\"), body = URLencode(sprintf(\"payload={\\\"channel\\\": \\\"%s\\\", \\\"username\\\": \\\"%s\\\", \\\"text\\\": \\\"%s\\\"%s}\",",
        "+ ",
        "                                                                       channel, username, output, icon_emoji)))",
        "+ ",
        "    warn_for_status(resp)",
        "+ ",
        "  }",
        "+ ",
        "  return(invisible())",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "#data = fromJSON(file=\"https://site.api.espn.com/apis/site/v2/sports/basketball/womens-college-basketball/scoreboard?groups=50\")",
        "> ",
        "data = fromJSON(file=\"scoreboard.json\")",
        "> ",
        "games = data[[\"events\"]]",
        "> ",
        "",
        "> ",
        "games_previous = read.csv('all_games.csv')",
        "> ",
        "games_table = as.data.frame(do.call(rbind, games))",
        "Warning message:\n",
        "In (function (..., deparse.level = 1)  :",
        "\n ",
        " number of columns of result is not a multiple of vector length (arg 1)\n",
        "> ",
        "",
        "> ",
        "games_table$competitions[[1]][[\"broadcasts\"]]",
        "NULL\n",
        "> ",
        "",
        "> ",
        "has_odds = NULL",
        "> ",
        "",
        "> ",
        "for (a in 1:length(games))",
        "+ ",
        "{",
        "+ ",
        "  has_odds = as.vector(c(has_odds,0 < length(games_table$competitions[[a]][[1]][[\"odds\"]])))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "games_table$has_odds = has_odds",
        "> ",
        "",
        "> ",
        "games_clean = games_table[,c(\"id\",\"shortName\",\"has_odds\",\"date\")]",
        "> ",
        "",
        "> ",
        "games_clean$date = as.character(with_tz((strptime(games_clean$date, \"%Y-%m-%dT%H:%MZ\",tz = \"UTC\")),\"America/Chicago\"))",
        "> ",
        "",
        "> ",
        "games_clean <- as.data.frame(apply(games_clean,2,as.character))",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[order(games_clean$date),]",
        "> ",
        "rownames(games_clean) = NULL",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[which(games_clean$has_odds == 'TRUE'),]",
        "> ",
        "",
        "> ",
        "games_output = rbind(games_previous,games_clean)",
        "> ",
        "games_output = unique(rbind(games_previous,games_clean))",
        "> ",
        "View(games_output)",
        "> ",
        "games_new = subset(games_clean, !(id %in% games_previous$id))",
        "> ",
        "View(games_new)",
        "> ",
        "games_new = subset(games_clean, !(id %in% games_previous$id))[,c(2,4)]",
        "> ",
        "View(games_new)",
        "> ",
        "colnames(games_new) = c(\"Game\",\"Date Time CT\")",
        "> ",
        "View(games_new)",
        "> ",
        "library(rjson)",
        "> ",
        "library(slackr)",
        "> ",
        "library(httr)",
        "> ",
        "library(lubridate)",
        "> ",
        "slackr_bot1 <- function(...,",
        "+ ",
        "                        channel=Sys.getenv(\"SLACK_CHANNEL\"),",
        "+ ",
        "                        username=Sys.getenv(\"SLACK_USERNAME\"),",
        "+ ",
        "                        icon_emoji=Sys.getenv(\"SLACK_ICON_EMOJI\"),",
        "+ ",
        "                        incoming_webhook_url=Sys.getenv(\"SLACK_INCOMING_URL_PREFIX\")) {",
        "+ ",
        "  ",
        "+ ",
        "  if (incoming_webhook_url == \"\") {",
        "+ ",
        "    stop(\"No incoming webhook URL specified. Did you forget to call slackr_setup()?\", call. = FALSE)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (icon_emoji != \"\") { icon_emoji <- sprintf(', \"icon_emoji\": \"%s\"', icon_emoji)  }",
        "+ ",
        "  ",
        "+ ",
        "  resp_ret <- \"\"",
        "+ ",
        "  ",
        "+ ",
        "  if (!missing(...)) {",
        "+ ",
        "    ",
        "+ ",
        "    # mimics capture.output",
        "+ ",
        "    ",
        "+ ",
        "    # get the arglist",
        "+ ",
        "    args <- substitute(list(...))[-1L]",
        "+ ",
        "    ",
        "+ ",
        "    # setup in-memory sink",
        "+ ",
        "    rval <- NULL",
        "+ ",
        "    fil <- textConnection(\"rval\", \"w\", local = TRUE)",
        "+ ",
        "    ",
        "+ ",
        "    sink(fil)",
        "+ ",
        "    on.exit({",
        "+ ",
        "      sink()",
        "+ ",
        "      close(fil)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # where we'll need to eval expressions",
        "+ ",
        "    pf <- parent.frame()",
        "+ ",
        "    ",
        "+ ",
        "    # how we'll eval expressions",
        "+ ",
        "    evalVis <- function(expr) withVisible(eval(expr, pf))",
        "+ ",
        "    ",
        "+ ",
        "    # for each expression",
        "+ ",
        "    for (i in seq_along(args)) {",
        "+ ",
        "      ",
        "+ ",
        "      expr <- args[[i]]",
        "+ ",
        "      ",
        "+ ",
        "      # do something, note all the newlines...Slack ``` needs them",
        "+ ",
        "      tmp <- switch(mode(expr),",
        "+ ",
        "                    # if it's actually an expresison, iterate over it",
        "+ ",
        "                    expression = {",
        "+ ",
        "                      lapply(expr, evalVis)",
        "+ ",
        "                    },",
        "+ ",
        "                    # if it's a call or a name, eval, printing run output as if in console",
        "+ ",
        "                    call = ,",
        "+ ",
        "                    name = {",
        "+ ",
        "                      list(evalVis(expr))",
        "+ ",
        "                    },",
        "+ ",
        "                    # if pretty much anything else (i.e. a bare value) just output it",
        "+ ",
        "                    integer = ,",
        "+ ",
        "                    double = ,",
        "+ ",
        "                    complex = ,",
        "+ ",
        "                    raw = ,",
        "+ ",
        "                    logical = ,",
        "+ ",
        "                    numeric = cat(sprintf(\"%s\\n\\n\", as.character(expr))),",
        "+ ",
        "                    character = cat(sprintf(\"%s\\n\\n\", expr)),",
        "+ ",
        "                    stop(\"mode of argument not handled at present by slackr\"))",
        "+ ",
        "      ",
        "+ ",
        "      for (item in tmp) if (item$visible) { cat(item$value); cat(\"\\n\") }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    on.exit()",
        "+ ",
        "    ",
        "+ ",
        "    sink()",
        "+ ",
        "    close(fil)",
        "+ ",
        "    ",
        "+ ",
        "    # combined all of them (rval is a character vector)",
        "+ ",
        "    output <- paste0(rval, collapse=\"\\n\")",
        "+ ",
        "    ",
        "+ ",
        "    loc <- Sys.getlocale('LC_CTYPE')",
        "+ ",
        "    Sys.setlocale('LC_CTYPE','C')",
        "+ ",
        "    on.exit(Sys.setlocale(\"LC_CTYPE\", loc))",
        "+ ",
        "    ",
        "+ ",
        "    resp <- POST(url = incoming_webhook_url, encode = \"form\",",
        "+ ",
        "                 add_headers(`Content-Type` = \"application/x-www-form-urlencoded\",",
        "+ ",
        "                             Accept = \"*/*\"), body = URLencode(sprintf(\"payload={\\\"channel\\\": \\\"%s\\\", \\\"username\\\": \\\"%s\\\", \\\"text\\\": \\\"%s\\\"%s}\",",
        "+ ",
        "                                                                       channel, username, output, icon_emoji)))",
        "+ ",
        "    warn_for_status(resp)",
        "+ ",
        "  }",
        "+ ",
        "  return(invisible())",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data = fromJSON(file=\"https://site.api.espn.com/apis/site/v2/sports/basketball/womens-college-basketball/scoreboard?groups=50\")",
        "> ",
        "#data = fromJSON(file=\"scoreboard.json\")",
        "> ",
        "games = data[[\"events\"]]",
        "> ",
        "",
        "> ",
        "games_previous = read.csv('all_games.csv')",
        "> ",
        "games_table = as.data.frame(do.call(rbind, games))",
        "> ",
        "",
        "> ",
        "games_table$competitions[[1]][[\"broadcasts\"]]",
        "NULL\n",
        "> ",
        "",
        "> ",
        "has_odds = NULL",
        "> ",
        "",
        "> ",
        "for (a in 1:length(games))",
        "+ ",
        "{",
        "+ ",
        "  has_odds = as.vector(c(has_odds,0 < length(games_table$competitions[[a]][[1]][[\"odds\"]])))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "games_table$has_odds = has_odds",
        "> ",
        "",
        "> ",
        "games_clean = games_table[,c(\"id\",\"shortName\",\"has_odds\",\"date\")]",
        "> ",
        "",
        "> ",
        "games_clean$date = as.character(with_tz((strptime(games_clean$date, \"%Y-%m-%dT%H:%MZ\",tz = \"UTC\")),\"America/Chicago\"))",
        "> ",
        "",
        "> ",
        "games_clean <- as.data.frame(apply(games_clean,2,as.character))",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[order(games_clean$date),]",
        "> ",
        "rownames(games_clean) = NULL",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[which(games_clean$has_odds == 'TRUE'),]",
        "> ",
        "",
        "> ",
        "games_new = subset(games_clean, !(id %in% games_previous$id))[,c(2,4)]",
        "> ",
        "colnames(games_new) = c(\"Game\",\"Date Time CT\")",
        "> ",
        "",
        "> ",
        "games_output = unique(rbind(games_previous,games_clean))",
        "> ",
        "",
        "> ",
        "write.csv(games_output,'all_games.csv', row.names = F)",
        "> ",
        "",
        "> ",
        "# webhook = readLines(\"C:/Users/jacob/Desktop/WNBA Schedule New/webhook.txt\")",
        "> ",
        "# #webhook = readLines(\"/home/pi/WNBA-Schedule/webhook.txt\")",
        "> ",
        "# ",
        "> ",
        "# relevant_games = paste(final_broadcast_info$all_together[which(final_broadcast_info$gameDate == date_today)],",
        "> ",
        "#                        sep = \"\\n\")",
        "> ",
        "# ",
        "> ",
        "# finished_output = c(paste(\"#WNBA Schedule\",date_string,\":\\n\",sep = \" \"),",
        "> ",
        "#                     \":trophy: = Commissioners Cup\\n\\n\",",
        "> ",
        "#                     relevant_games,",
        "> ",
        "#                     \"#WNBATwitter\")",
        "> ",
        "# ",
        "> ",
        "# #slackr_bot1(finished_output, incoming_webhook_url = webhook)",
        "> ",
        "library(rjson)",
        "> ",
        "library(slackr)",
        "> ",
        "library(httr)",
        "> ",
        "library(lubridate)",
        "> ",
        "slackr_bot1 <- function(...,",
        "+ ",
        "                        channel=Sys.getenv(\"SLACK_CHANNEL\"),",
        "+ ",
        "                        username=Sys.getenv(\"SLACK_USERNAME\"),",
        "+ ",
        "                        icon_emoji=Sys.getenv(\"SLACK_ICON_EMOJI\"),",
        "+ ",
        "                        incoming_webhook_url=Sys.getenv(\"SLACK_INCOMING_URL_PREFIX\")) {",
        "+ ",
        "  ",
        "+ ",
        "  if (incoming_webhook_url == \"\") {",
        "+ ",
        "    stop(\"No incoming webhook URL specified. Did you forget to call slackr_setup()?\", call. = FALSE)",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (icon_emoji != \"\") { icon_emoji <- sprintf(', \"icon_emoji\": \"%s\"', icon_emoji)  }",
        "+ ",
        "  ",
        "+ ",
        "  resp_ret <- \"\"",
        "+ ",
        "  ",
        "+ ",
        "  if (!missing(...)) {",
        "+ ",
        "    ",
        "+ ",
        "    # mimics capture.output",
        "+ ",
        "    ",
        "+ ",
        "    # get the arglist",
        "+ ",
        "    args <- substitute(list(...))[-1L]",
        "+ ",
        "    ",
        "+ ",
        "    # setup in-memory sink",
        "+ ",
        "    rval <- NULL",
        "+ ",
        "    fil <- textConnection(\"rval\", \"w\", local = TRUE)",
        "+ ",
        "    ",
        "+ ",
        "    sink(fil)",
        "+ ",
        "    on.exit({",
        "+ ",
        "      sink()",
        "+ ",
        "      close(fil)",
        "+ ",
        "    })",
        "+ ",
        "    ",
        "+ ",
        "    # where we'll need to eval expressions",
        "+ ",
        "    pf <- parent.frame()",
        "+ ",
        "    ",
        "+ ",
        "    # how we'll eval expressions",
        "+ ",
        "    evalVis <- function(expr) withVisible(eval(expr, pf))",
        "+ ",
        "    ",
        "+ ",
        "    # for each expression",
        "+ ",
        "    for (i in seq_along(args)) {",
        "+ ",
        "      ",
        "+ ",
        "      expr <- args[[i]]",
        "+ ",
        "      ",
        "+ ",
        "      # do something, note all the newlines...Slack ``` needs them",
        "+ ",
        "      tmp <- switch(mode(expr),",
        "+ ",
        "                    # if it's actually an expresison, iterate over it",
        "+ ",
        "                    expression = {",
        "+ ",
        "                      lapply(expr, evalVis)",
        "+ ",
        "                    },",
        "+ ",
        "                    # if it's a call or a name, eval, printing run output as if in console",
        "+ ",
        "                    call = ,",
        "+ ",
        "                    name = {",
        "+ ",
        "                      list(evalVis(expr))",
        "+ ",
        "                    },",
        "+ ",
        "                    # if pretty much anything else (i.e. a bare value) just output it",
        "+ ",
        "                    integer = ,",
        "+ ",
        "                    double = ,",
        "+ ",
        "                    complex = ,",
        "+ ",
        "                    raw = ,",
        "+ ",
        "                    logical = ,",
        "+ ",
        "                    numeric = cat(sprintf(\"%s\\n\\n\", as.character(expr))),",
        "+ ",
        "                    character = cat(sprintf(\"%s\\n\\n\", expr)),",
        "+ ",
        "                    stop(\"mode of argument not handled at present by slackr\"))",
        "+ ",
        "      ",
        "+ ",
        "      for (item in tmp) if (item$visible) { cat(item$value); cat(\"\\n\") }",
        "+ ",
        "    }",
        "+ ",
        "    ",
        "+ ",
        "    on.exit()",
        "+ ",
        "    ",
        "+ ",
        "    sink()",
        "+ ",
        "    close(fil)",
        "+ ",
        "    ",
        "+ ",
        "    # combined all of them (rval is a character vector)",
        "+ ",
        "    output <- paste0(rval, collapse=\"\\n\")",
        "+ ",
        "    ",
        "+ ",
        "    loc <- Sys.getlocale('LC_CTYPE')",
        "+ ",
        "    Sys.setlocale('LC_CTYPE','C')",
        "+ ",
        "    on.exit(Sys.setlocale(\"LC_CTYPE\", loc))",
        "+ ",
        "    ",
        "+ ",
        "    resp <- POST(url = incoming_webhook_url, encode = \"form\",",
        "+ ",
        "                 add_headers(`Content-Type` = \"application/x-www-form-urlencoded\",",
        "+ ",
        "                             Accept = \"*/*\"), body = URLencode(sprintf(\"payload={\\\"channel\\\": \\\"%s\\\", \\\"username\\\": \\\"%s\\\", \\\"text\\\": \\\"%s\\\"%s}\",",
        "+ ",
        "                                                                       channel, username, output, icon_emoji)))",
        "+ ",
        "    warn_for_status(resp)",
        "+ ",
        "  }",
        "+ ",
        "  return(invisible())",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "data = fromJSON(file=\"https://site.api.espn.com/apis/site/v2/sports/basketball/womens-college-basketball/scoreboard?groups=50\")",
        "> ",
        "#data = fromJSON(file=\"scoreboard.json\")",
        "> ",
        "games = data[[\"events\"]]",
        "> ",
        "",
        "> ",
        "games_previous = read.csv('all_games.csv')",
        "> ",
        "games_table = as.data.frame(do.call(rbind, games))",
        "> ",
        "",
        "> ",
        "games_table$competitions[[1]][[\"broadcasts\"]]",
        "NULL\n",
        "> ",
        "",
        "> ",
        "has_odds = NULL",
        "> ",
        "",
        "> ",
        "for (a in 1:length(games))",
        "+ ",
        "{",
        "+ ",
        "  has_odds = as.vector(c(has_odds,0 < length(games_table$competitions[[a]][[1]][[\"odds\"]])))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "games_table$has_odds = has_odds",
        "> ",
        "",
        "> ",
        "games_clean = games_table[,c(\"id\",\"shortName\",\"has_odds\",\"date\")]",
        "> ",
        "",
        "> ",
        "games_clean$date = as.character(with_tz((strptime(games_clean$date, \"%Y-%m-%dT%H:%MZ\",tz = \"UTC\")),\"America/Chicago\"))",
        "> ",
        "",
        "> ",
        "games_clean <- as.data.frame(apply(games_clean,2,as.character))",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[order(games_clean$date),]",
        "> ",
        "rownames(games_clean) = NULL",
        "> ",
        "",
        "> ",
        "games_clean = games_clean[which(games_clean$has_odds == 'TRUE'),]",
        "> ",
        "",
        "> ",
        "games_new = subset(games_clean, !(id %in% games_previous$id))[,c(2,4)]",
        "> ",
        "colnames(games_new) = c(\"Game\",\"Date Time CT\")",
        "> ",
        "",
        "> ",
        "games_output = unique(rbind(games_previous,games_clean))",
        "> ",
        "",
        "> ",
        "write.csv(games_output,'all_games.csv', row.names = F)",
        "> ",
        "",
        "> ",
        "# webhook = readLines(\"C:/Users/jacob/Desktop/WNBA Schedule New/webhook.txt\")",
        "> ",
        "# #webhook = readLines(\"/home/pi/WNBA-Schedule/webhook.txt\")",
        "> ",
        "# ",
        "> ",
        "# relevant_games = paste(final_broadcast_info$all_together[which(final_broadcast_info$gameDate == date_today)],",
        "> ",
        "#                        sep = \"\\n\")",
        "> ",
        "# ",
        "> ",
        "# finished_output = c(paste(\"#WNBA Schedule\",date_string,\":\\n\",sep = \" \"),",
        "> ",
        "#                     \":trophy: = Commissioners Cup\\n\\n\",",
        "> ",
        "#                     relevant_games,",
        "> ",
        "#                     \"#WNBATwitter\")",
        "> ",
        "# ",
        "> ",
        "# #slackr_bot1(finished_output, incoming_webhook_url = webhook)",
        "> ",
        "View(games_table)",
        "Error in (function (..., na.last = TRUE, decreasing = FALSE, method = c(\"auto\",  : \n  unimplemented type 'list' in 'orderVector1'\n",
        "Error: VECTOR_ELT() can only be applied to a 'list', not a 'closure'\n",
        "Error in .rs.findDataFrame(\"\", \"games_table\", \"BC882731\", \"C:/Users/jacob/Desktop/Bet Scraping/.Rproj.user/1BDF1908/viewer-cache\") : \n  R_Reprotect: only 1 protected item, can't reprotect index -4\n",
        "Error in .rs.findDataFrame(\"\", \"games_table\", \"BC882731\", \"C:/Users/jacob/Desktop/Bet Scraping/.Rproj.user/1BDF1908/viewer-cache\") : \n  R_Reprotect: only 1 protected item, can't reprotect index -4\n",
        "Error in if (totalCols == 0) return(NULL) : argument is of length zero\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "Error in which(search() == \".conflicts\") : \n  R_Reprotect: only 3 protected items, can't reprotect index -2\n",
        "\nRestarting R session...\n\n"
    ]
}